# TODO
- BUG : ne pas rajouter un module déjà installé dans la config
- Ne faire les migrations qu'en mode admin et sous le backoffice


- Trouver une solution pour ne pas avoir a modifier Module.php et le eval code.
	=> Peut-être ne pas utiliser use dans le code du module et charger le reste via l'autoload
		=> Comment faire pour autoload les fichiers qui ne sont pas dans illuminato ?
- Trouver des solutions plus sexy pour la requete ajax de la pagination des commentaires dans le panel admin
- Comment faire en sorte que les Eloquant Model fonctionnent avec ObjectModel list view ?
	=> Récréer une List View pour Eloquant ?
	=> Ajouter un ObjectModel automatiquement dans le Model Eloquent ?
- L'installation/désinstallation de Tab dans le panel d'admin ne devrait pas se faire dans le install du module ?
- Automatiquement register au hookRoute ou alors ne pas passer du tout par les routes PrestaShop qui ont l'air bien pourrie (besoin de créer un tableau)... voir commment faire autrement.
- Comment gérer les roots qui peuvent avoir 2 écriture (friendly et normal ?)
	=> Pas besoin le routeHook est appeler que dans du friendlyUrl normalement, à vérifier.
- Est-ce que l'on doit setter une APP_KEY ou utiliser celle de PrestaShop (y en a-t-il une ?)
- Trouver un moyen de faire des Link plus sympa que ça !!!
<div class="rte">
  {assign var=params value=[
    'module_action' => 'list',
    'id_product'=> $smarty.get.id_product
  ]}
  <a href="{$link->getModuleLink('mymodcomments', 'comments', $params)}">
    {l s='See all comments' mod='mymodcomments'}
  </a>
</div>
- Trouver un système plus sympa pour les controllers pour gérer les actions que le initContent
	=> On devrait pouvoir automatiquement gérer plusieurs actions dans un controller sans souci
- Dans les controller, appeler aussi automatiquement setMedia avec les bons CSS et JS
	=> Peut-être fournir une config ?
- A la place des noms de classes à ralonge utiliser les namespaces.
- Utiliser la fonction pagination de Laravel
- Automatiquement rajouter le hookModuleRoutes au module si on veut gérer les friendly URL sur un controller
	=> Pouvoir utiliser les routes de Laravel ?
- Utiliser Eloquent à la place de ObjectModel
- Utiliser les Form Helper de Laravel
- Passer en subtree git
	=> Non plutôt des symlink, plus rapide et pratique je pense
	=> Pour le déploiement, il faudra revoir le symlink pour qu'il puisse correspondre à l'environnement de dev et à la prod
		=> Peut-être faudra-t-il le mettre dans le .gitignore et le rajouter à la main sur le serveur
- Pour les configuration => automatiquement rajouter le prefix du module ce qui évite d'avoir à le mettre soit même
- Gérer le getContent autrement, via peut-être la création de AdminController ?
- Etudier comment Laravel gère les variables de ses formulaires et s'il faut tout passer à la vue ou si c'est géré autrement avec un Form::generate ou autre par exemple ?
- Etudier si on ne peut pas utiliser Response::json, Response::download etc. pour faire des réponses HTTP spécifiques.
- Simplifier le Tools::getValue($nom, $valeur_default) en Input::get
- Ajouter Input::only, Input::except
- Pas mal d'avoir ça aussi : Input::get('products.0.name');
- Etudier si on a besoin de travailler avec les cookies quelle méthode est intéressante
- Input::flash est très intéressant
- Input::file est aussi très intéressant
- Etudier la gestion d'erreur dans PrestaShop
- Etuider IoC container et Facade et voir si c'est utile pour PrestaUtils
- Truc de ouf Form::model, donne envie d'utiliser leur modèle et leur SQL Helper
- Rajouter les helpers, ils sont vraiment cool !!
- Pouvoir utiliser PrestaUtils pour plusieurs modules en même temps
	=> Problème avec la variable module
- Attention laravel utilise une fonction e() pour nettoyer tout code entrant.
- Attention a bien traduire tout ce qui doit être traduit aussi
- Utiliser le système de validation de formulaire de Laravel
- Comprendre vraiment ce que génère le helper avec la toolbar, le token, l'action etc.
- Définir le nom en fonction du dossier du module, si pas de fichiers trouvés, afficher une erreur.
- Ajouter automatiquement JS et CSS
	=> Le faire à l'install si on détecte des css et des js
	=> Comment faire si la personne rajoute des CSS et des JS pendant le développement ?
		=> Forcer à réinstaller ?
- Bien se renseigner sur les controller
- Trouver un système plus abouti que getContent pour gérer les submit en mode admin
	- Pouvoir créer un controller avec des fonction getToto, postToto qui sont automatiquement gérées par l'outil
	- Avoir des beforeFilter etc.
- Trouver un système plus abouti pour gérer l'ajax et les controller que de créer un fichier par point d'entrée
	=> Eviter d'avoir à créer des Ajax Link...
- Mettre le code sur github et frama.git
- Développer Smartier : un langage de template au dessus de SMARTY (un peu comme SASS) qui :
	- Convertit l'Toto' en {capture name='my_module_tempvar'}{l s='World' mod='mymodule'}{/capture}  {assign var='my_module_name' value=$smarty.capture.my_module_tempvar} ? => Moche mais ça serait efficace...
	- Permet de passer des tableaux dans du code genre Form::input(['toto'=>'tata'])

DONE
- Pouvoir rajouter dynamiquement des classes dans le autoload (serviceProvider) à l'installation du module
Et aussi ne pas avoir à les rajouter au config.app.providers